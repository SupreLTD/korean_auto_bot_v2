import datetime

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from decimal import Decimal

from keyboards import price_kb as KB
from parsers.exchange_rates import get_rates
from parsers.tax import get_tax

router = Router()


class FSMPrice(StatesGroup):
    age = State()
    engine = State()
    power = State()
    capacity = State()
    price = State()


@router.callback_query(F.data == 'price')
async def get_age(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        'üöó –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è?',
        reply_markup=KB.age_choose()
    )
    await state.set_state(FSMPrice.age)


@router.callback_query(KB.PriceChoose.filter(F.action == 'age'))
async def get_engine(call: types.CallbackQuery, callback_data: KB.PriceChoose, state: FSMContext):
    await state.update_data(age=callback_data.data)
    await state.update_data(age_answer=callback_data.answer)
    await call.message.edit_text(f'üöó –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è?\n\n‚úÖ –û—Ç–≤–µ—Ç: {callback_data.answer}')
    await call.message.answer('üöï –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è?', reply_markup=KB.engine_choose())
    await state.set_state(FSMPrice.engine)


@router.callback_query(KB.PriceChoose.filter(F.action == 'engine'))
async def get_power(call: types.CallbackQuery, callback_data: KB.PriceChoose, state: FSMContext):
    await state.update_data(engine=callback_data.data)
    await state.update_data(engine_answer=callback_data.answer)
    await call.message.edit_text(f'üöï –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è?\n\n‚úÖ –û—Ç–≤–µ—Ç: {callback_data.answer}')
    await call.message.answer('üèé –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)?')
    await state.set_state(FSMPrice.power)


@router.message(FSMPrice.power)
async def get_capacity(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(power=message.text)
        await state.update_data(power_answer=message.text)
        await message.answer(f'üèé –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)?\n\n‚úÖ –û—Ç–≤–µ—Ç: {message.text} (–ª.—Å.)')
        await message.answer('üöô –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å–º3 (1 –ª = 1000 —Å–º3)?')
        await state.set_state(FSMPrice.capacity)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
    await message.delete()


@router.message(FSMPrice.capacity)
async def get_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(capacity=message.text)
        await message.answer(f'üöô –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å–º3 (1 –ª = 1000 —Å–º3)??\n\n‚úÖ –û—Ç–≤–µ—Ç: {message.text} (—Å–º3)')
        await message.answer('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –í–æ–Ω–∞—Ö (‚Ç©)')
        await state.set_state(FSMPrice.price)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
    await message.delete()


@router.message(FSMPrice.price)
async def result(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        fsm_data = await state.get_data()
        age = fsm_data['age']
        engine = fsm_data['engine']
        power = fsm_data['power']
        capacity = fsm_data['capacity']
        rates = await get_rates()
        price = Decimal(message.text) * rates.KRW
        tax = await get_tax(age, engine, power, capacity, message.text)
        spending_in_korea = (1500 * rates.USD) * Decimal('1.03')  # –ù–ê–°–¢–†–ê–ò–í–ê–ï–¢–°–Ø
        kom_ru = 50000
        delivery = 300000
        car_price_rub = price * Decimal('1.055')
        total = spending_in_korea + kom_ru + tax.tax + delivery + car_price_rub

        result_message = f'üïµÔ∏è –í–∞—à –∑–∞–ø—Ä–æ—Å: üëá\nüöó –í–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {fsm_data["age_answer"]}\n' \
                          f'üöï –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {fsm_data["engine_answer"]}\nüèé –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: {power} –ª.—Å.\n' \
                          f'üöô –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {capacity} –º3\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±: {float(car_price_rub):.02f}\n\n' \
                          f'–†–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç:\n1 ‚ÇΩ = {1/rates.KRW:.02f} ‚Ç©\n1 ‚Ç© = {rates.KRW} ‚ÇΩ\n' \
                          f'1 $ = {rates.USD:.02f} ‚ÇΩ\n' \
                          f'* –ö—É—Ä—Å –≤–∞–ª—é—Ç –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞: {datetime.datetime.now().replace(microsecond=0)}\n' \
                          f'—Å —Å–∞–π—Ç–∞ –¶–ë –†–§\n\n' \
                          f'‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {tax.sbor} ‚ÇΩ\n‚Ä¢ –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {tax.util} ‚ÇΩ\n' \
                          f'‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {tax.tax} ‚ÇΩ\n‚Ä¢ –†–∞—Å—Ö–æ–¥—ã –≤ –ö–æ—Ä–µ–µ: {spending_in_korea:.02f}\n' \
                          f'‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –†–§: {kom_ru} ‚ÇΩ\n' \
                          f'‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ {delivery} ‚ÇΩ\n\n ‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {total}'
        await message.answer(result_message)
        await state.clear()



    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
    await message.delete()
